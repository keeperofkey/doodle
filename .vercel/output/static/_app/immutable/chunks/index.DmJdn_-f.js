class m{constructor(U=0,Q=0,F=0){this.x=U,this.y=Q,this.z=F}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z}add(U){return typeof U=="number"?new m(this.x+U,this.y+U,this.z+U):new m(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return typeof U=="number"?new m(this.x-U,this.y-U,this.z-U):new m(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return typeof U=="number"?new m(this.x*U,this.y*U,this.z*U):U instanceof m?new m(this.x*U.x,this.y*U.y,this.z*U.z):new m(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+U.buffer[14])}divide(U){return typeof U=="number"?new m(this.x/U,this.y/U,this.z/U):new m(this.x/U.x,this.y/U.y,this.z/U.z)}cross(U){const Q=this.y*U.z-this.z*U.y,F=this.z*U.x-this.x*U.z,l=this.x*U.y-this.y*U.x;return new m(Q,F,l)}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z}lerp(U,Q){return new m(this.x+(U.x-this.x)*Q,this.y+(U.y-this.y)*Q,this.z+(U.z-this.z)*Q)}min(U){return new m(Math.min(this.x,U.x),Math.min(this.y,U.y),Math.min(this.z,U.z))}max(U){return new m(Math.max(this.x,U.x),Math.max(this.y,U.y),Math.max(this.z,U.z))}getComponent(U){switch(U){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${U}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2)}normalize(){const U=this.magnitude();return new m(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new m(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(U=1){return new m(U,U,U)}}class v{constructor(U=0,Q=0,F=0,l=1){this.x=U,this.y=Q,this.z=F,this.w=l}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z&&this.w===U.w}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new v(this.x/U,this.y/U,this.z/U,this.w/U)}multiply(U){const Q=this.w,F=this.x,l=this.y,Z=this.z,d=U.w,n=U.x,V=U.y,t=U.z;return new v(Q*n+F*d+l*t-Z*V,Q*V-F*t+l*d+Z*n,Q*t+F*V-l*n+Z*d,Q*d-F*n-l*V-Z*t)}inverse(){const U=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new v(-this.x/U,-this.y/U,-this.z/U,this.w/U)}apply(U){const Q=new v(U.x,U.y,U.z,0),F=new v(-this.x,-this.y,-this.z,this.w),l=this.multiply(Q).multiply(F);return new m(l.x,l.y,l.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new v(this.x,this.y,this.z,this.w)}static FromEuler(U){const Q=U.x/2,F=U.y/2,l=U.z/2,Z=Math.cos(F),d=Math.sin(F),n=Math.cos(Q),V=Math.sin(Q),t=Math.cos(l),A=Math.sin(l);return new v(Z*V*t+d*n*A,d*n*t-Z*V*A,Z*n*A-d*V*t,Z*n*t+d*V*A)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),Q=1-2*(this.x*this.x+this.y*this.y),F=Math.atan2(U,Q);let l;const Z=2*(this.w*this.y-this.z*this.x);l=Math.abs(Z)>=1?Math.sign(Z)*Math.PI/2:Math.asin(Z);const d=2*(this.w*this.z+this.x*this.y),n=1-2*(this.y*this.y+this.z*this.z),V=Math.atan2(d,n);return new m(F,l,V)}static FromMatrix3(U){const Q=U.buffer,F=Q[0]+Q[4]+Q[8];let l,Z,d,n;if(F>0){const V=.5/Math.sqrt(F+1);n=.25/V,l=(Q[7]-Q[5])*V,Z=(Q[2]-Q[6])*V,d=(Q[3]-Q[1])*V}else if(Q[0]>Q[4]&&Q[0]>Q[8]){const V=2*Math.sqrt(1+Q[0]-Q[4]-Q[8]);n=(Q[7]-Q[5])/V,l=.25*V,Z=(Q[1]+Q[3])/V,d=(Q[2]+Q[6])/V}else if(Q[4]>Q[8]){const V=2*Math.sqrt(1+Q[4]-Q[0]-Q[8]);n=(Q[2]-Q[6])/V,l=(Q[1]+Q[3])/V,Z=.25*V,d=(Q[5]+Q[7])/V}else{const V=2*Math.sqrt(1+Q[8]-Q[0]-Q[4]);n=(Q[3]-Q[1])/V,l=(Q[2]+Q[6])/V,Z=(Q[5]+Q[7])/V,d=.25*V}return new v(l,Z,d,n)}static FromAxisAngle(U,Q){const F=Q/2,l=Math.sin(F),Z=Math.cos(F);return new v(U.x*l,U.y*l,U.z*l,Z)}static LookRotation(U){const Q=new m(0,0,1),F=Q.dot(U);if(Math.abs(F- -1)<1e-6)return new v(0,1,0,Math.PI);if(Math.abs(F-1)<1e-6)return new v;const l=Math.acos(F),Z=Q.cross(U).normalize();return v.FromAxisAngle(Z,l)}toString(){return`[${this.flat().join(", ")}]`}}class rU{constructor(){const U=new Map;this.addEventListener=(Q,F)=>{U.has(Q)||U.set(Q,new Set),U.get(Q).add(F)},this.removeEventListener=(Q,F)=>{U.has(Q)&&U.get(Q).delete(F)},this.hasEventListener=(Q,F)=>!!U.has(Q)&&U.get(Q).has(F),this.dispatchEvent=Q=>{if(U.has(Q.type))for(const F of U.get(Q.type))F(Q)}}}class QU{constructor(U=1,Q=0,F=0,l=0,Z=0,d=1,n=0,V=0,t=0,A=0,e=1,I=0,o=0,c=0,C=0,E=1){this.buffer=[U,Q,F,l,Z,d,n,V,t,A,e,I,o,c,C,E]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==U.buffer[Q])return!1;return!0}multiply(U){const Q=this.buffer,F=U.buffer;return new QU(F[0]*Q[0]+F[1]*Q[4]+F[2]*Q[8]+F[3]*Q[12],F[0]*Q[1]+F[1]*Q[5]+F[2]*Q[9]+F[3]*Q[13],F[0]*Q[2]+F[1]*Q[6]+F[2]*Q[10]+F[3]*Q[14],F[0]*Q[3]+F[1]*Q[7]+F[2]*Q[11]+F[3]*Q[15],F[4]*Q[0]+F[5]*Q[4]+F[6]*Q[8]+F[7]*Q[12],F[4]*Q[1]+F[5]*Q[5]+F[6]*Q[9]+F[7]*Q[13],F[4]*Q[2]+F[5]*Q[6]+F[6]*Q[10]+F[7]*Q[14],F[4]*Q[3]+F[5]*Q[7]+F[6]*Q[11]+F[7]*Q[15],F[8]*Q[0]+F[9]*Q[4]+F[10]*Q[8]+F[11]*Q[12],F[8]*Q[1]+F[9]*Q[5]+F[10]*Q[9]+F[11]*Q[13],F[8]*Q[2]+F[9]*Q[6]+F[10]*Q[10]+F[11]*Q[14],F[8]*Q[3]+F[9]*Q[7]+F[10]*Q[11]+F[11]*Q[15],F[12]*Q[0]+F[13]*Q[4]+F[14]*Q[8]+F[15]*Q[12],F[12]*Q[1]+F[13]*Q[5]+F[14]*Q[9]+F[15]*Q[13],F[12]*Q[2]+F[13]*Q[6]+F[14]*Q[10]+F[15]*Q[14],F[12]*Q[3]+F[13]*Q[7]+F[14]*Q[11]+F[15]*Q[15])}clone(){const U=this.buffer;return new QU(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}determinant(){const U=this.buffer;return U[12]*U[9]*U[6]*U[3]-U[8]*U[13]*U[6]*U[3]-U[12]*U[5]*U[10]*U[3]+U[4]*U[13]*U[10]*U[3]+U[8]*U[5]*U[14]*U[3]-U[4]*U[9]*U[14]*U[3]-U[12]*U[9]*U[2]*U[7]+U[8]*U[13]*U[2]*U[7]+U[12]*U[1]*U[10]*U[7]-U[0]*U[13]*U[10]*U[7]-U[8]*U[1]*U[14]*U[7]+U[0]*U[9]*U[14]*U[7]+U[12]*U[5]*U[2]*U[11]-U[4]*U[13]*U[2]*U[11]-U[12]*U[1]*U[6]*U[11]+U[0]*U[13]*U[6]*U[11]+U[4]*U[1]*U[14]*U[11]-U[0]*U[5]*U[14]*U[11]-U[8]*U[5]*U[2]*U[15]+U[4]*U[9]*U[2]*U[15]+U[8]*U[1]*U[6]*U[15]-U[0]*U[9]*U[6]*U[15]-U[4]*U[1]*U[10]*U[15]+U[0]*U[5]*U[10]*U[15]}invert(){const U=this.buffer,Q=this.determinant();if(Q===0)throw new Error("Matrix is not invertible.");const F=1/Q;return new QU(F*(U[5]*U[10]*U[15]-U[5]*U[11]*U[14]-U[9]*U[6]*U[15]+U[9]*U[7]*U[14]+U[13]*U[6]*U[11]-U[13]*U[7]*U[10]),F*(-U[1]*U[10]*U[15]+U[1]*U[11]*U[14]+U[9]*U[2]*U[15]-U[9]*U[3]*U[14]-U[13]*U[2]*U[11]+U[13]*U[3]*U[10]),F*(U[1]*U[6]*U[15]-U[1]*U[7]*U[14]-U[5]*U[2]*U[15]+U[5]*U[3]*U[14]+U[13]*U[2]*U[7]-U[13]*U[3]*U[6]),F*(-U[1]*U[6]*U[11]+U[1]*U[7]*U[10]+U[5]*U[2]*U[11]-U[5]*U[3]*U[10]-U[9]*U[2]*U[7]+U[9]*U[3]*U[6]),F*(-U[4]*U[10]*U[15]+U[4]*U[11]*U[14]+U[8]*U[6]*U[15]-U[8]*U[7]*U[14]-U[12]*U[6]*U[11]+U[12]*U[7]*U[10]),F*(U[0]*U[10]*U[15]-U[0]*U[11]*U[14]-U[8]*U[2]*U[15]+U[8]*U[3]*U[14]+U[12]*U[2]*U[11]-U[12]*U[3]*U[10]),F*(-U[0]*U[6]*U[15]+U[0]*U[7]*U[14]+U[4]*U[2]*U[15]-U[4]*U[3]*U[14]-U[12]*U[2]*U[7]+U[12]*U[3]*U[6]),F*(U[0]*U[6]*U[11]-U[0]*U[7]*U[10]-U[4]*U[2]*U[11]+U[4]*U[3]*U[10]+U[8]*U[2]*U[7]-U[8]*U[3]*U[6]),F*(U[4]*U[9]*U[15]-U[4]*U[11]*U[13]-U[8]*U[5]*U[15]+U[8]*U[7]*U[13]+U[12]*U[5]*U[11]-U[12]*U[7]*U[9]),F*(-U[0]*U[9]*U[15]+U[0]*U[11]*U[13]+U[8]*U[1]*U[15]-U[8]*U[3]*U[13]-U[12]*U[1]*U[11]+U[12]*U[3]*U[9]),F*(U[0]*U[5]*U[15]-U[0]*U[7]*U[13]-U[4]*U[1]*U[15]+U[4]*U[3]*U[13]+U[12]*U[1]*U[7]-U[12]*U[3]*U[5]),F*(-U[0]*U[5]*U[11]+U[0]*U[7]*U[9]+U[4]*U[1]*U[11]-U[4]*U[3]*U[9]-U[8]*U[1]*U[7]+U[8]*U[3]*U[5]),F*(-U[4]*U[9]*U[14]+U[4]*U[10]*U[13]+U[8]*U[5]*U[14]-U[8]*U[6]*U[13]-U[12]*U[5]*U[10]+U[12]*U[6]*U[9]),F*(U[0]*U[9]*U[14]-U[0]*U[10]*U[13]-U[8]*U[1]*U[14]+U[8]*U[2]*U[13]+U[12]*U[1]*U[10]-U[12]*U[2]*U[9]),F*(-U[0]*U[5]*U[14]+U[0]*U[6]*U[13]+U[4]*U[1]*U[14]-U[4]*U[2]*U[13]-U[12]*U[1]*U[6]+U[12]*U[2]*U[5]),F*(U[0]*U[5]*U[10]-U[0]*U[6]*U[9]-U[4]*U[1]*U[10]+U[4]*U[2]*U[9]+U[8]*U[1]*U[6]-U[8]*U[2]*U[5]))}static Compose(U,Q,F){const l=Q.x,Z=Q.y,d=Q.z,n=Q.w,V=l+l,t=Z+Z,A=d+d,e=l*V,I=l*t,o=l*A,c=Z*t,C=Z*A,E=d*A,S=n*V,N=n*t,z=n*A,j=F.x,O=F.y,K=F.z;return new QU((1-(c+E))*j,(I+z)*j,(o-N)*j,0,(I-z)*O,(1-(e+E))*O,(C+S)*O,0,(o+N)*K,(C-S)*K,(1-(e+c))*K,0,U.x,U.y,U.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class zU extends Event{constructor(U){super("objectAdded"),this.object=U}}class fU extends Event{constructor(U){super("objectRemoved"),this.object=U}}class vU extends Event{constructor(U){super("objectChanged"),this.object=U}}class gU extends rU{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new m,this._rotation=new v,this._scale=new m(1,1,1),this._transform=new QU,this._changeEvent=new vU(this),this.update=()=>{},this.applyPosition=()=>{this.position=new m},this.applyRotation=()=>{this.rotation=new v},this.applyScale=()=>{this.scale=new m(1,1,1)},this.raiseChangeEvent=()=>{this.dispatchEvent(this._changeEvent)}}_updateMatrix(){this._transform=QU.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(U){this._position.equals(U)||(this._position=U,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(U){this._rotation.equals(U)||(this._rotation=U,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(U){this._scale.equals(U)||(this._scale=U,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let U=new m(0,0,1);return U=this.rotation.apply(U),U}get transform(){return this._transform}}class dU{constructor(U=1,Q=0,F=0,l=0,Z=1,d=0,n=0,V=0,t=1){this.buffer=[U,Q,F,l,Z,d,n,V,t]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==U.buffer[Q])return!1;return!0}multiply(U){const Q=this.buffer,F=U.buffer;return new dU(F[0]*Q[0]+F[3]*Q[1]+F[6]*Q[2],F[1]*Q[0]+F[4]*Q[1]+F[7]*Q[2],F[2]*Q[0]+F[5]*Q[1]+F[8]*Q[2],F[0]*Q[3]+F[3]*Q[4]+F[6]*Q[5],F[1]*Q[3]+F[4]*Q[4]+F[7]*Q[5],F[2]*Q[3]+F[5]*Q[4]+F[8]*Q[5],F[0]*Q[6]+F[3]*Q[7]+F[6]*Q[8],F[1]*Q[6]+F[4]*Q[7]+F[7]*Q[8],F[2]*Q[6]+F[5]*Q[7]+F[8]*Q[8])}clone(){const U=this.buffer;return new dU(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static Eye(U=1){return new dU(U,0,0,0,U,0,0,0,U)}static Diagonal(U){return new dU(U.x,0,0,0,U.y,0,0,0,U.z)}static RotationFromQuaternion(U){return new dU(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const Q=Math.cos(U.x),F=Math.sin(U.x),l=Math.cos(U.y),Z=Math.sin(U.y),d=Math.cos(U.z),n=Math.sin(U.z);return new dU(l*d+Z*F*n,-l*n+Z*F*d,Z*Q,Q*n,Q*d,-F,-Z*d+l*F*n,Z*n+l*F*d,l*Q)}toString(){return`[${this.buffer.join(", ")}]`}}class eU{constructor(U=0,Q=null,F=null,l=null,Z=null){this.changed=!1,this.detached=!1,this._vertexCount=U,this._positions=Q||new Float32Array(0),this._rotations=F||new Float32Array(0),this._scales=l||new Float32Array(0),this._colors=Z||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=d=>{for(let n=0;n<this.vertexCount;n++)this.positions[3*n+0]+=d.x,this.positions[3*n+1]+=d.y,this.positions[3*n+2]+=d.z;this.changed=!0},this.rotate=d=>{const n=dU.RotationFromQuaternion(d).buffer;for(let V=0;V<this.vertexCount;V++){const t=this.positions[3*V+0],A=this.positions[3*V+1],e=this.positions[3*V+2];this.positions[3*V+0]=n[0]*t+n[1]*A+n[2]*e,this.positions[3*V+1]=n[3]*t+n[4]*A+n[5]*e,this.positions[3*V+2]=n[6]*t+n[7]*A+n[8]*e;const I=new v(this.rotations[4*V+1],this.rotations[4*V+2],this.rotations[4*V+3],this.rotations[4*V+0]),o=d.multiply(I);this.rotations[4*V+1]=o.x,this.rotations[4*V+2]=o.y,this.rotations[4*V+3]=o.z,this.rotations[4*V+0]=o.w}this.changed=!0},this.scale=d=>{for(let n=0;n<this.vertexCount;n++)this.positions[3*n+0]*=d.x,this.positions[3*n+1]*=d.y,this.positions[3*n+2]*=d.z,this.scales[3*n+0]*=d.x,this.scales[3*n+1]*=d.y,this.scales[3*n+2]*=d.z;this.changed=!0},this.serialize=()=>{const d=new Uint8Array(this.vertexCount*eU.RowLength),n=new Float32Array(d.buffer),V=new Uint8Array(d.buffer);for(let t=0;t<this.vertexCount;t++)n[8*t+0]=this.positions[3*t+0],n[8*t+1]=this.positions[3*t+1],n[8*t+2]=this.positions[3*t+2],V[32*t+24+0]=this.colors[4*t+0],V[32*t+24+1]=this.colors[4*t+1],V[32*t+24+2]=this.colors[4*t+2],V[32*t+24+3]=this.colors[4*t+3],n[8*t+3+0]=this.scales[3*t+0],n[8*t+3+1]=this.scales[3*t+1],n[8*t+3+2]=this.scales[3*t+2],V[32*t+28+0]=128*this.rotations[4*t+0]+128&255,V[32*t+28+1]=128*this.rotations[4*t+1]+128&255,V[32*t+28+2]=128*this.rotations[4*t+2]+128&255,V[32*t+28+3]=128*this.rotations[4*t+3]+128&255;return d},this.reattach=(d,n,V,t,A)=>{console.assert(d.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${d.byteLength} bytes`),this._positions=new Float32Array(d),this._rotations=new Float32Array(n),this._scales=new Float32Array(V),this._colors=new Uint8Array(t),this._selection=new Uint8Array(A),this.detached=!1}}static Deserialize(U){const Q=U.length/eU.RowLength,F=new Float32Array(3*Q),l=new Float32Array(4*Q),Z=new Float32Array(3*Q),d=new Uint8Array(4*Q),n=new Float32Array(U.buffer),V=new Uint8Array(U.buffer);for(let t=0;t<Q;t++)F[3*t+0]=n[8*t+0],F[3*t+1]=n[8*t+1],F[3*t+2]=n[8*t+2],l[4*t+0]=(V[32*t+28+0]-128)/128,l[4*t+1]=(V[32*t+28+1]-128)/128,l[4*t+2]=(V[32*t+28+2]-128)/128,l[4*t+3]=(V[32*t+28+3]-128)/128,Z[3*t+0]=n[8*t+3+0],Z[3*t+1]=n[8*t+3+1],Z[3*t+2]=n[8*t+3+2],d[4*t+0]=V[32*t+24+0],d[4*t+1]=V[32*t+24+1],d[4*t+2]=V[32*t+24+2],d[4*t+3]=V[32*t+24+3];return new eU(Q,F,l,Z,d)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}eU.RowLength=32;class oU{static SplatToPLY(U,Q){let F=`ply
format binary_little_endian 1.0
`;F+=`element vertex ${Q}
`;const l=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let c=0;c<45;c++)l.push(`f_rest_${c}`);l.push("opacity"),l.push("scale_0"),l.push("scale_1"),l.push("scale_2"),l.push("rot_0"),l.push("rot_1"),l.push("rot_2"),l.push("rot_3");for(const c of l)F+=`property float ${c}
`;F+=`end_header
`;const Z=new TextEncoder().encode(F),d=248,n=Q*d,V=new DataView(new ArrayBuffer(Z.length+n));new Uint8Array(V.buffer).set(Z,0);const t=new Float32Array(U),A=new Uint8Array(U),e=Z.length,I=220,o=232;for(let c=0;c<Q;c++){const C=t[8*c+0],E=t[8*c+1],S=t[8*c+2],N=(A[32*c+24+0]/255-.5)/this.SH_C0,z=(A[32*c+24+1]/255-.5)/this.SH_C0,j=(A[32*c+24+2]/255-.5)/this.SH_C0,O=A[32*c+24+3]/255,K=Math.log(O/(1-O)),w=Math.log(t[8*c+3+0]),$=Math.log(t[8*c+3+1]),q=Math.log(t[8*c+3+2]);let u=new v((A[32*c+28+1]-128)/128,(A[32*c+28+2]-128)/128,(A[32*c+28+3]-128)/128,(A[32*c+28+0]-128)/128);u=u.normalize();const UU=u.w,G=u.x,y=u.y,nU=u.z;V.setFloat32(e+d*c+0,C,!0),V.setFloat32(e+d*c+4,E,!0),V.setFloat32(e+d*c+8,S,!0),V.setFloat32(e+d*c+24+0,N,!0),V.setFloat32(e+d*c+24+4,z,!0),V.setFloat32(e+d*c+24+8,j,!0),V.setFloat32(e+d*c+216,K,!0),V.setFloat32(e+d*c+I+0,w,!0),V.setFloat32(e+d*c+I+4,$,!0),V.setFloat32(e+d*c+I+8,q,!0),V.setFloat32(e+d*c+o+0,UU,!0),V.setFloat32(e+d*c+o+4,G,!0),V.setFloat32(e+d*c+o+8,y,!0),V.setFloat32(e+d*c+o+12,nU,!0)}return V.buffer}}oU.SH_C0=.28209479177387814;class IU{constructor(U,Q){this.min=U,this.max=Q}contains(U){return U.x>=this.min.x&&U.x<=this.max.x&&U.y>=this.min.y&&U.y<=this.max.y&&U.z>=this.min.z&&U.z<=this.max.z}intersects(U){return this.max.x>=U.min.x&&this.min.x<=U.max.x&&this.max.y>=U.min.y&&this.min.y<=U.max.y&&this.max.z>=U.min.z&&this.min.z<=U.max.z}size(){return this.max.subtract(this.min)}center(){return this.min.add(this.max).divide(2)}expand(U){this.min=this.min.min(U),this.max=this.max.max(U)}permute(){const U=this.min,Q=this.max;this.min=new m(Math.min(U.x,Q.x),Math.min(U.y,Q.y),Math.min(U.z,Q.z)),this.max=new m(Math.max(U.x,Q.x),Math.max(U.y,Q.y),Math.max(U.z,Q.z))}}class BU extends gU{constructor(U=void 0){super(),this.selectedChanged=!1,this.colorTransformChanged=!1,this._selected=!1,this._colorTransforms=[],this._colorTransformsMap=new Map,this._data=U||new eU,this._bounds=new IU(new m(1/0,1/0,1/0),new m(-1/0,-1/0,-1/0)),this.recalculateBounds=()=>{this._bounds=new IU(new m(1/0,1/0,1/0),new m(-1/0,-1/0,-1/0));for(let Q=0;Q<this._data.vertexCount;Q++)this._bounds.expand(new m(this._data.positions[3*Q],this._data.positions[3*Q+1],this._data.positions[3*Q+2]))},this.applyPosition=()=>{this.data.translate(this.position),this.position=new m},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new v},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new m(1,1,1)},this.recalculateBounds()}saveToFile(U=null,Q=null){if(!document)return;if(Q){if(Q!=="splat"&&Q!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!U){const d=new Date;U=`splat-${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}.${Q}`}this.applyRotation(),this.applyScale(),this.applyPosition();const F=this.data.serialize();let l;if(Q==="ply"){const d=oU.SplatToPLY(F.buffer,this.data.vertexCount);l=new Blob([d],{type:"application/octet-stream"})}else l=new Blob([F.buffer],{type:"application/octet-stream"});const Z=document.createElement("a");Z.download=U,Z.href=URL.createObjectURL(l),Z.click()}get data(){return this._data}get selected(){return this._selected}set selected(U){this._selected!==U&&(this._selected=U,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}get colorTransforms(){return this._colorTransforms}get colorTransformsMap(){return this._colorTransformsMap}get bounds(){let U=this._bounds.center();U=U.add(this.position);let Q=this._bounds.size();return Q=Q.multiply(this.scale),new IU(U.subtract(Q.divide(2)),U.add(Q.divide(2)))}}class KU{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new QU,this._viewMatrix=new QU,this._viewProj=new QU,this._updateProjectionMatrix=()=>{this._projectionMatrix=new QU(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(U,Q)=>{const F=dU.RotationFromQuaternion(Q).buffer,l=U.flat();this._viewMatrix=new QU(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,-l[0]*F[0]-l[1]*F[3]-l[2]*F[6],-l[0]*F[1]-l[1]*F[4]-l[2]*F[7],-l[0]*F[2]-l[1]*F[5]-l[2]*F[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(U,Q)=>{this._width=U,this._height=Q,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(U){this._fx!==U&&(this._fx=U,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(U){this._fy!==U&&(this._fy=U,this._updateProjectionMatrix())}get near(){return this._near}set near(U){this._near!==U&&(this._near=U,this._updateProjectionMatrix())}get far(){return this._far}set far(U){this._far!==U&&(this._far=U,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class lU{constructor(U=0,Q=0,F=0,l=0){this.x=U,this.y=Q,this.z=F,this.w=l}equals(U){return this.x===U.x&&this.y===U.y&&this.z===U.z&&this.w===U.w}add(U){return typeof U=="number"?new lU(this.x+U,this.y+U,this.z+U,this.w+U):new lU(this.x+U.x,this.y+U.y,this.z+U.z,this.w+U.w)}subtract(U){return typeof U=="number"?new lU(this.x-U,this.y-U,this.z-U,this.w-U):new lU(this.x-U.x,this.y-U.y,this.z-U.z,this.w-U.w)}multiply(U){return typeof U=="number"?new lU(this.x*U,this.y*U,this.z*U,this.w*U):U instanceof lU?new lU(this.x*U.x,this.y*U.y,this.z*U.z,this.w*U.w):new lU(this.x*U.buffer[0]+this.y*U.buffer[4]+this.z*U.buffer[8]+this.w*U.buffer[12],this.x*U.buffer[1]+this.y*U.buffer[5]+this.z*U.buffer[9]+this.w*U.buffer[13],this.x*U.buffer[2]+this.y*U.buffer[6]+this.z*U.buffer[10]+this.w*U.buffer[14],this.x*U.buffer[3]+this.y*U.buffer[7]+this.z*U.buffer[11]+this.w*U.buffer[15])}dot(U){return this.x*U.x+this.y*U.y+this.z*U.z+this.w*U.w}lerp(U,Q){return new lU(this.x+(U.x-this.x)*Q,this.y+(U.y-this.y)*Q,this.z+(U.z-this.z)*Q,this.w+(U.w-this.w)*Q)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2+(this.w-U.w)**2)}normalize(){const U=this.magnitude();return new lU(this.x/U,this.y/U,this.z/U,this.w/U)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new lU(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class lF extends gU{constructor(U=void 0){super(),this._data=U||new KU,this._position=new m(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(Q,F)=>{const l=new lU(Q,F,-1,1),Z=this._data.projectionMatrix.invert(),d=l.multiply(Z),n=this._data.viewMatrix.invert(),V=d.multiply(n);return new m(V.x/V.w,V.y/V.w,V.z/V.w).subtract(this.position).normalize()}}get data(){return this._data}}class QF extends rU{constructor(){super(),this._objects=[],this.addObject=U=>{this.objects.push(U),this.dispatchEvent(new zU(U))},this.removeObject=U=>{const Q=this.objects.indexOf(U);if(Q<0)throw new Error("Object not found in scene");this.objects.splice(Q,1),this.dispatchEvent(new fU(U))},this.findObject=U=>{for(const Q of this.objects)if(U(Q))return Q},this.findObjectOfType=U=>{for(const Q of this.objects)if(Q instanceof U)return Q},this.reset=()=>{const U=this.objects.slice();for(const Q of U)this.removeObject(Q)},this.reset()}saveToFile(U=null,Q=null){if(!document)return;if(Q){if(Q!=="splat"&&Q!=="ply")throw new Error("Invalid format. Must be 'splat' or 'ply'")}else Q="splat";if(!U){const t=new Date;U=`scene-${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}.${Q}`}const F=[];let l=0;for(const t of this.objects)if(t.applyRotation(),t.applyScale(),t.applyPosition(),t instanceof BU){const A=t.data.serialize();F.push(A),l+=t.data.vertexCount}const Z=new Uint8Array(l*eU.RowLength);let d,n=0;for(const t of F)Z.set(t,n),n+=t.length;if(Q==="ply"){const t=oU.SplatToPLY(Z.buffer,l);d=new Blob([t],{type:"application/octet-stream"})}else d=new Blob([Z.buffer],{type:"application/octet-stream"});const V=document.createElement("a");V.download=U,V.href=URL.createObjectURL(d),V.click()}get objects(){return this._objects}}async function jU(X,U){const Q=await fetch(X,{mode:"cors",credentials:"omit",cache:U?"force-cache":"default"});if(Q.status!=200)throw new Error(Q.status+" Unable to load "+Q.url);return Q}async function OU(X,U){return X.headers.has("content-length")?async function(Q,F){const l=Q.body.getReader(),Z=parseInt(Q.headers.get("content-length")),d=new Uint8Array(Z);let n=0;for(;;){const{done:V,value:t}=await l.read();if(V)break;d.set(t,n),n+=t.length,F==null||F(n/Z)}return d}(X,U):async function(Q,F){const l=Q.body.getReader(),Z=[];let d=0;for(;;){const{done:t,value:A}=await l.read();if(t)break;Z.push(A),d+=A.length}const n=new Uint8Array(d);let V=0;for(const t of Z)n.set(t,V),V+=t.length,F==null||F(V/d);return n}(X,U)}class dF{static async LoadAsync(U,Q,F,l=!1){const Z=await jU(U,l),d=await OU(Z,F);return this.LoadFromArrayBuffer(d,Q)}static async LoadFromFileAsync(U,Q,F){const l=new FileReader;let Z=new BU;return l.onload=d=>{Z=this.LoadFromArrayBuffer(d.target.result,Q)},l.onprogress=d=>{F==null||F(d.loaded/d.total)},l.readAsArrayBuffer(U),await new Promise(d=>{l.onloadend=()=>{d()}}),Z}static LoadFromArrayBuffer(U,Q){const F=new Uint8Array(U),l=eU.Deserialize(F),Z=new BU(l);return Q.addObject(Z),Z}}function LU(X,U,Q){var F=U===void 0?null:U,l=function(V,t){var A=atob(V);if(t){for(var e=new Uint8Array(A.length),I=0,o=A.length;I<o;++I)e[I]=A.charCodeAt(I);return String.fromCharCode.apply(null,new Uint16Array(e.buffer))}return A}(X,Q!==void 0&&Q),Z=l.indexOf(`
`,10)+1,d=l.substring(Z)+(F?"//# sourceMappingURL="+F:""),n=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(n)}function NU(X,U,Q){var F;return function(l){return F=F||LU(X,U,Q),new Worker(F,l)}}var PU=NU("",null,!1);class _U{constructor(U,Q){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=U;const F=U.gl;this._program=F.createProgram(),this._passes=Q||[];const l=F.createShader(F.VERTEX_SHADER);F.shaderSource(l,this._getVertexSource()),F.compileShader(l),F.getShaderParameter(l,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(l));const Z=F.createShader(F.FRAGMENT_SHADER);F.shaderSource(Z,this._getFragmentSource()),F.compileShader(Z),F.getShaderParameter(Z,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(Z)),F.attachShader(this.program,l),F.attachShader(this.program,Z),F.linkProgram(this.program),F.getProgramParameter(this.program,F.LINK_STATUS)||console.error(F.getProgramInfoLog(this.program)),this.resize=()=>{F.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),F.useProgram(this._program),this._initialize();for(const d of this.passes)d.initialize(this);this._initialized=!0,this._started=!0},this.render=(d,n)=>{F.useProgram(this._program),this._scene===d&&this._camera===n||(this.dispose(),this._scene=d,this._camera=n,this.initialize());for(const V of this.passes)V.render();this._render()},this.dispose=()=>{if(this._initialized){F.useProgram(this._program);for(const d of this.passes)d.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var qU=NU("",null,!1),$U=function(X={}){var U,Q,F=X;F.ready=new Promise((B,R)=>{U=B,Q=R});var l,Z=Object.assign({},F),d="";d=(d=self.location.href).indexOf("blob:")!==0?d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):"",l=B=>{var R=new XMLHttpRequest;return R.open("GET",B,!1),R.responseType="arraybuffer",R.send(null),new Uint8Array(R.response)},F.print||console.log.bind(console);var n,V,t=F.printErr||console.error.bind(console);Object.assign(F,Z),Z=null,F.arguments&&F.arguments,F.thisProgram&&F.thisProgram,F.quit&&F.quit,F.wasmBinary&&(n=F.wasmBinary),typeof WebAssembly!="object"&&q("no native wasm support detected");var A,e,I,o,c,C,E,S,N=!1;function z(){var B=V.buffer;F.HEAP8=A=new Int8Array(B),F.HEAP16=I=new Int16Array(B),F.HEAPU8=e=new Uint8Array(B),F.HEAPU16=o=new Uint16Array(B),F.HEAP32=c=new Int32Array(B),F.HEAPU32=C=new Uint32Array(B),F.HEAPF32=E=new Float32Array(B),F.HEAPF64=S=new Float64Array(B)}var j=[],O=[],K=[],w=0,$=null;function q(B){F.onAbort&&F.onAbort(B),t(B="Aborted("+B+")"),N=!0,B+=". Build with -sASSERTIONS for more info.";var R=new WebAssembly.RuntimeError(B);throw Q(R),R}var u,UU,G="data:application/octet-stream;base64,",y=B=>B.startsWith(G);function nU(B){if(B==u&&n)return new Uint8Array(n);var R=function(a){if(y(a))return function(W){for(var s=atob(W),h=new Uint8Array(s.length),J=0;J<s.length;++J)h[J]=s.charCodeAt(J);return h}(a.slice(G.length))}(B);if(R)return R;if(l)return l(B);throw"both async and sync fetching of the wasm failed"}function M(B,R,a){return function(W){return Promise.resolve().then(()=>nU(W))}(B).then(W=>WebAssembly.instantiate(W,R)).then(W=>W).then(a,W=>{t(`failed to asynchronously prepare wasm: ${W}`),q(W)})}y(u="data:application/octet-stream;base64,")||(UU=u,u=F.locateFile?F.locateFile(UU,d):d+UU);var i=B=>{for(;B.length>0;)B.shift()(F)};F.noExitRuntime;var p,T,Y=B=>{for(var R="",a=B;e[a];)R+=p[e[a++]];return R},VU={},AU={},H=B=>{throw new T(B)};function L(B,R,a={}){if(!("argPackAdvance"in R))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(W,s,h={}){var J=s.name;if(W||H(`type "${J}" must have a positive integer typeid pointer`),AU.hasOwnProperty(W)){if(h.ignoreDuplicateRegistrations)return;H(`Cannot register type '${J}' twice`)}if(AU[W]=s,VU.hasOwnProperty(W)){var r=VU[W];delete VU[W],r.forEach(b=>b())}}(B,R,a)}function FU(){this.allocated=[void 0],this.freelist=[]}var x=new FU,aU=()=>{for(var B=0,R=x.reserved;R<x.allocated.length;++R)x.allocated[R]!==void 0&&++B;return B},sU=B=>(B||H("Cannot use deleted val. handle = "+B),x.get(B).value),EU=B=>{switch(B){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return x.allocate({refcount:1,value:B})}};function JU(B){return this.fromWireType(c[B>>2])}var pU=(B,R)=>{switch(R){case 4:return function(a){return this.fromWireType(E[a>>2])};case 8:return function(a){return this.fromWireType(S[a>>3])};default:throw new TypeError(`invalid float width (${R}): ${B}`)}},SU=(B,R,a)=>{switch(R){case 1:return a?W=>A[W>>0]:W=>e[W>>0];case 2:return a?W=>I[W>>1]:W=>o[W>>1];case 4:return a?W=>c[W>>2]:W=>C[W>>2];default:throw new TypeError(`invalid integer width (${R}): ${B}`)}};function yU(B){return this.fromWireType(C[B>>2])}var mU=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,YU=(B,R)=>B?((a,W,s)=>{for(var h=W+s,J=W;a[J]&&!(J>=h);)++J;if(J-W>16&&a.buffer&&mU)return mU.decode(a.subarray(W,J));for(var r="";W<J;){var b=a[W++];if(128&b){var g=63&a[W++];if((224&b)!=192){var P=63&a[W++];if((b=(240&b)==224?(15&b)<<12|g<<6|P:(7&b)<<18|g<<12|P<<6|63&a[W++])<65536)r+=String.fromCharCode(b);else{var f=b-65536;r+=String.fromCharCode(55296|f>>10,56320|1023&f)}}else r+=String.fromCharCode((31&b)<<6|g)}else r+=String.fromCharCode(b)}return r})(e,B,R):"",bU=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,kU=(B,R)=>{for(var a=B,W=a>>1,s=W+R/2;!(W>=s)&&o[W];)++W;if((a=W<<1)-B>32&&bU)return bU.decode(e.subarray(B,a));for(var h="",J=0;!(J>=R/2);++J){var r=I[B+2*J>>1];if(r==0)break;h+=String.fromCharCode(r)}return h},uU=(B,R,a)=>{if(a===void 0&&(a=2147483647),a<2)return 0;for(var W=R,s=(a-=2)<2*B.length?a/2:B.length,h=0;h<s;++h){var J=B.charCodeAt(h);I[R>>1]=J,R+=2}return I[R>>1]=0,R-W},TU=B=>2*B.length,HU=(B,R)=>{for(var a=0,W="";!(a>=R/4);){var s=c[B+4*a>>2];if(s==0)break;if(++a,s>=65536){var h=s-65536;W+=String.fromCharCode(55296|h>>10,56320|1023&h)}else W+=String.fromCharCode(s)}return W},xU=(B,R,a)=>{if(a===void 0&&(a=2147483647),a<4)return 0;for(var W=R,s=W+a-4,h=0;h<B.length;++h){var J=B.charCodeAt(h);if(J>=55296&&J<=57343&&(J=65536+((1023&J)<<10)|1023&B.charCodeAt(++h)),c[R>>2]=J,(R+=4)+4>s)break}return c[R>>2]=0,R-W},DU=B=>{for(var R=0,a=0;a<B.length;++a){var W=B.charCodeAt(a);W>=55296&&W<=57343&&++a,R+=4}return R},wU=B=>{var R=(B-V.buffer.byteLength+65535)/65536;try{return V.grow(R),z(),1}catch{}};(()=>{for(var B=new Array(256),R=0;R<256;++R)B[R]=String.fromCharCode(R);p=B})(),T=F.BindingError=class extends Error{constructor(B){super(B),this.name="BindingError"}},F.InternalError=class extends Error{constructor(B){super(B),this.name="InternalError"}},Object.assign(FU.prototype,{get(B){return this.allocated[B]},has(B){return this.allocated[B]!==void 0},allocate(B){var R=this.freelist.pop()||this.allocated.length;return this.allocated[R]=B,R},free(B){this.allocated[B]=void 0,this.freelist.push(B)}}),x.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),x.reserved=x.allocated.length,F.count_emval_handles=aU;var MU={f:(B,R,a,W,s)=>{},i:(B,R,a,W)=>{L(B,{name:R=Y(R),fromWireType:function(s){return!!s},toWireType:function(s,h){return h?a:W},argPackAdvance:8,readValueFromPointer:function(s){return this.fromWireType(e[s])},destructorFunction:null})},h:(B,R)=>{L(B,{name:R=Y(R),fromWireType:a=>{var W=sU(a);return(s=>{s>=x.reserved&&--x.get(s).refcount==0&&x.free(s)})(a),W},toWireType:(a,W)=>EU(W),argPackAdvance:8,readValueFromPointer:JU,destructorFunction:null})},e:(B,R,a)=>{L(B,{name:R=Y(R),fromWireType:W=>W,toWireType:(W,s)=>s,argPackAdvance:8,readValueFromPointer:pU(R,a),destructorFunction:null})},b:(B,R,a,W,s)=>{R=Y(R);var h=b=>b;if(W===0){var J=32-8*a;h=b=>b<<J>>>J}var r=R.includes("unsigned");L(B,{name:R,fromWireType:h,toWireType:r?function(b,g){return this.name,g>>>0}:function(b,g){return this.name,g},argPackAdvance:8,readValueFromPointer:SU(R,a,W!==0),destructorFunction:null})},a:(B,R,a)=>{var W=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][R];function s(h){var J=C[h>>2],r=C[h+4>>2];return new W(A.buffer,r,J)}L(B,{name:a=Y(a),fromWireType:s,argPackAdvance:8,readValueFromPointer:s},{ignoreDuplicateRegistrations:!0})},d:(B,R)=>{var a=(R=Y(R))==="std::string";L(B,{name:R,fromWireType(W){var s,h=C[W>>2],J=W+4;if(a)for(var r=J,b=0;b<=h;++b){var g=J+b;if(b==h||e[g]==0){var P=YU(r,g-r);s===void 0?s=P:(s+="\0",s+=P),r=g+1}}else{var f=new Array(h);for(b=0;b<h;++b)f[b]=String.fromCharCode(e[J+b]);s=f.join("")}return RU(W),s},toWireType(W,s){var h;s instanceof ArrayBuffer&&(s=new Uint8Array(s));var J=typeof s=="string";J||s instanceof Uint8Array||s instanceof Uint8ClampedArray||s instanceof Int8Array||H("Cannot pass non-string to std::string"),h=a&&J?(f=>{for(var D=0,k=0;k<f.length;++k){var tU=f.charCodeAt(k);tU<=127?D++:tU<=2047?D+=2:tU>=55296&&tU<=57343?(D+=4,++k):D+=3}return D})(s):s.length;var r=hU(4+h+1),b=r+4;if(C[r>>2]=h,a&&J)((f,D,k,tU)=>{if(!(tU>0))return 0;for(var WU=k+tU-1,cU=0;cU<f.length;++cU){var _=f.charCodeAt(cU);if(_>=55296&&_<=57343&&(_=65536+((1023&_)<<10)|1023&f.charCodeAt(++cU)),_<=127){if(k>=WU)break;D[k++]=_}else if(_<=2047){if(k+1>=WU)break;D[k++]=192|_>>6,D[k++]=128|63&_}else if(_<=65535){if(k+2>=WU)break;D[k++]=224|_>>12,D[k++]=128|_>>6&63,D[k++]=128|63&_}else{if(k+3>=WU)break;D[k++]=240|_>>18,D[k++]=128|_>>12&63,D[k++]=128|_>>6&63,D[k++]=128|63&_}}D[k]=0})(s,e,b,h+1);else if(J)for(var g=0;g<h;++g){var P=s.charCodeAt(g);P>255&&(RU(b),H("String has UTF-16 code units that do not fit in 8 bits")),e[b+g]=P}else for(g=0;g<h;++g)e[b+g]=s[g];return W!==null&&W.push(RU,r),r},argPackAdvance:8,readValueFromPointer:yU,destructorFunction(W){RU(W)}})},c:(B,R,a)=>{var W,s,h,J,r;a=Y(a),R===2?(W=kU,s=uU,J=TU,h=()=>o,r=1):R===4&&(W=HU,s=xU,J=DU,h=()=>C,r=2),L(B,{name:a,fromWireType:b=>{for(var g,P=C[b>>2],f=h(),D=b+4,k=0;k<=P;++k){var tU=b+4+k*R;if(k==P||f[tU>>r]==0){var WU=W(D,tU-D);g===void 0?g=WU:(g+="\0",g+=WU),D=tU+R}}return RU(b),g},toWireType:(b,g)=>{typeof g!="string"&&H(`Cannot pass non-string to C++ string type ${a}`);var P=J(g),f=hU(4+P+R);return C[f>>2]=P>>r,s(g,f+4,P+R),b!==null&&b.push(RU,f),f},argPackAdvance:8,readValueFromPointer:JU,destructorFunction(b){RU(b)}})},j:(B,R)=>{L(B,{isVoid:!0,name:R=Y(R),argPackAdvance:0,fromWireType:()=>{},toWireType:(a,W)=>{}})},g:B=>{var R=e.length,a=2147483648;if((B>>>=0)>a)return!1;for(var W,s,h=1;h<=4;h*=2){var J=R*(1+.2/h);J=Math.min(J,B+100663296);var r=Math.min(a,(W=Math.max(B,J))+((s=65536)-W%s)%s);if(wU(r))return!0}return!1}},ZU=function(){var B,R,a,W={a:MU};function s(h,J){var r;return ZU=h.exports,V=ZU.k,z(),r=ZU.l,O.unshift(r),function(b){if(w--,F.monitorRunDependencies&&F.monitorRunDependencies(w),w==0&&$){var g=$;$=null,g()}}(),ZU}if(w++,F.monitorRunDependencies&&F.monitorRunDependencies(w),F.instantiateWasm)try{return F.instantiateWasm(W,s)}catch(h){t(`Module.instantiateWasm callback failed with error: ${h}`),Q(h)}return(B=u,R=W,a=function(h){s(h.instance)},M(B,R,a)).catch(Q),{}}();F._pack=(B,R,a,W,s,h,J,r,b,g,P)=>(F._pack=ZU.m)(B,R,a,W,s,h,J,r,b,g,P),F.__embind_initialize_bindings=()=>(F.__embind_initialize_bindings=ZU.n)();var iU,hU=F._malloc=B=>(hU=F._malloc=ZU.p)(B),RU=F._free=B=>(RU=F._free=ZU.q)(B);function CU(){function B(){iU||(iU=!0,F.calledRun=!0,N||(i(O),U(F),F.onRuntimeInitialized&&F.onRuntimeInitialized(),function(){if(F.postRun)for(typeof F.postRun=="function"&&(F.postRun=[F.postRun]);F.postRun.length;)R=F.postRun.shift(),K.unshift(R);var R;i(K)}()))}w>0||(function(){if(F.preRun)for(typeof F.preRun=="function"&&(F.preRun=[F.preRun]);F.preRun.length;)R=F.preRun.shift(),j.unshift(R);var R;i(j)}(),w>0||(F.setStatus?(F.setStatus("Running..."),setTimeout(function(){setTimeout(function(){F.setStatus("")},1),B()},1)):B()))}if($=function B(){iU||CU(),iU||($=B)},F.preInit)for(typeof F.preInit=="function"&&(F.preInit=[F.preInit]);F.preInit.length>0;)F.preInit.pop()();return CU(),X.ready};class UF{constructor(U){this.dataChanged=!1,this.transformsChanged=!1,this.colorTransformsChanged=!1,this._updating=new Set,this._dirty=new Set;let Q=0,F=0;this._splatIndices=new Map,this._offsets=new Map;const l=new Map;for(const A of U.objects)A instanceof BU&&(this._splatIndices.set(A,F),this._offsets.set(A,Q),l.set(Q,A),Q+=A.data.vertexCount,F++);this._vertexCount=Q,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=l.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._colorTransformsWidth=4,this._colorTransformsHeight=64,this._colorTransforms=new Float32Array(this._colorTransformsWidth*this._colorTransformsHeight*4),this._colorTransforms.fill(0),this._colorTransforms[0]=1,this._colorTransforms[5]=1,this._colorTransforms[10]=1,this._colorTransforms[15]=1,this._colorTransformIndicesWidth=1024,this._colorTransformIndicesHeight=Math.ceil(this.vertexCount/this._colorTransformIndicesWidth),this._colorTransformIndices=new Uint32Array(this._colorTransformIndicesWidth*this._colorTransformIndicesHeight),this.colorTransformIndices.fill(0),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new qU;const Z=A=>{const e=this._splatIndices.get(A);this._transforms.set(A.transform.buffer,20*e),this._transforms[20*e+16]=A.selected?1:0,A.positionChanged=!1,A.rotationChanged=!1,A.scaleChanged=!1,A.selectedChanged=!1,this.transformsChanged=!0},d=()=>{let A=!1;for(const o of this._splatIndices.keys())if(o.colorTransformChanged){A=!0;break}if(!A)return;const e=[new QU];this._colorTransformIndices.fill(0);let I=1;for(const o of this._splatIndices.keys()){const c=this._offsets.get(o);for(const C of o.colorTransforms)e.includes(C)||(e.push(C),I++);for(const C of o.colorTransformsMap.keys()){const E=o.colorTransformsMap.get(C);this._colorTransformIndices[C+c]=E+I-1}o.colorTransformChanged=!1}for(let o=0;o<e.length;o++){const c=e[o];this._colorTransforms.set(c.buffer,16*o)}this.colorTransformsChanged=!0};let n;this._worker.onmessage=A=>{if(A.data.response){const e=A.data.response,I=l.get(e.offset);Z(I),d();const o=this._splatIndices.get(I);for(let c=0;c<I.data.vertexCount;c++)this._transformIndices[e.offset+c]=o;this._data.set(e.data,8*e.offset),I.data.reattach(e.positions,e.rotations,e.scales,e.colors,e.selection),this._positions.set(e.worldPositions,3*e.offset),this._rotations.set(e.worldRotations,4*e.offset),this._scales.set(e.worldScales,3*e.offset),this._updating.delete(I),I.selectedChanged=!1,this.dataChanged=!0}},async function(){n=await $U()}();const V=A=>{if(!n)return void async function(){for(;!n;)await new Promise(u=>setTimeout(u,0))}().then(()=>{V(A)});Z(A);const e=n._malloc(3*A.data.vertexCount*4),I=n._malloc(4*A.data.vertexCount*4),o=n._malloc(3*A.data.vertexCount*4),c=n._malloc(4*A.data.vertexCount),C=n._malloc(A.data.vertexCount),E=n._malloc(8*A.data.vertexCount*4),S=n._malloc(3*A.data.vertexCount*4),N=n._malloc(4*A.data.vertexCount*4),z=n._malloc(3*A.data.vertexCount*4);n.HEAPF32.set(A.data.positions,e/4),n.HEAPF32.set(A.data.rotations,I/4),n.HEAPF32.set(A.data.scales,o/4),n.HEAPU8.set(A.data.colors,c),n.HEAPU8.set(A.data.selection,C),n._pack(A.selected,A.data.vertexCount,e,I,o,c,C,E,S,N,z);const j=new Uint32Array(n.HEAPU32.buffer,E,8*A.data.vertexCount),O=new Float32Array(n.HEAPF32.buffer,S,3*A.data.vertexCount),K=new Float32Array(n.HEAPF32.buffer,N,4*A.data.vertexCount),w=new Float32Array(n.HEAPF32.buffer,z,3*A.data.vertexCount),$=this._splatIndices.get(A),q=this._offsets.get(A);for(let u=0;u<A.data.vertexCount;u++)this._transformIndices[q+u]=$;this._data.set(j,8*q),this._positions.set(O,3*q),this._rotations.set(K,4*q),this._scales.set(w,3*q),n._free(e),n._free(I),n._free(o),n._free(c),n._free(C),n._free(E),n._free(S),n._free(N),n._free(z),this.dataChanged=!0,this.colorTransformsChanged=!0},t=A=>{if((A.positionChanged||A.rotationChanged||A.scaleChanged||A.selectedChanged)&&Z(A),A.colorTransformChanged&&d(),!A.data.changed||A.data.detached)return;const e={position:new Float32Array(A.position.flat()),rotation:new Float32Array(A.rotation.flat()),scale:new Float32Array(A.scale.flat()),selected:A.selected,vertexCount:A.data.vertexCount,positions:A.data.positions,rotations:A.data.rotations,scales:A.data.scales,colors:A.data.colors,selection:A.data.selection,offset:this._offsets.get(A)};this._worker.postMessage({splat:e},[e.position.buffer,e.rotation.buffer,e.scale.buffer,e.positions.buffer,e.rotations.buffer,e.scales.buffer,e.colors.buffer,e.selection.buffer]),this._updating.add(A),A.data.detached=!0};this.getSplat=A=>{let e=null;for(const[I,o]of this._offsets){if(!(A>=o))break;e=I}return e},this.getLocalIndex=(A,e)=>e-this._offsets.get(A),this.markDirty=A=>{this._dirty.add(A)},this.rebuild=()=>{for(const A of this._dirty)t(A);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const A of this._splatIndices.keys())V(A);d()}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get colorTransforms(){return this._colorTransforms}get colorTransformsWidth(){return this._colorTransformsWidth}get colorTransformsHeight(){return this._colorTransformsHeight}get colorTransformIndices(){return this._colorTransformIndices}get colorTransformIndicesWidth(){return this._colorTransformIndicesWidth}get colorTransformIndicesHeight(){return this._colorTransformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class GU{constructor(U=0,Q=0,F=0,l=255){this.r=U,this.g=Q,this.b=F,this.a=l}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map(U=>U.toString(16).padStart(2,"0")).join("")}toString(){return`[${this.flat().join(", ")}]`}}class XU extends _U{constructor(U,Q){super(U,Q),this._outlineThickness=10,this._outlineColor=new GU(255,165,0,255),this._renderData=null,this._depthIndex=new Uint32Array,this._splatTexture=null,this._worker=null;const F=U.canvas,l=U.gl;let Z,d,n,V,t,A,e,I,o,c,C,E,S,N,z,j,O,K,w;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),Z=l.getUniformLocation(this.program,"projection"),l.uniformMatrix4fv(Z,!1,this._camera.data.projectionMatrix.buffer),d=l.getUniformLocation(this.program,"viewport"),l.uniform2fv(d,new Float32Array([F.width,F.height])))};const $=()=>{this._worker=new PU,this._worker.onmessage=G=>{if(G.data.depthIndex){const{depthIndex:y}=G.data;this._depthIndex=y,l.bindBuffer(l.ARRAY_BUFFER,w),l.bufferData(l.ARRAY_BUFFER,y,l.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",q),this._scene.addEventListener("objectRemoved",u);for(const G of this._scene.objects)G instanceof BU&&G.addEventListener("objectChanged",UU);this._renderData=new UF(this._scene),n=l.getUniformLocation(this.program,"focal"),l.uniform2fv(n,new Float32Array([this._camera.data.fx,this._camera.data.fy])),V=l.getUniformLocation(this.program,"view"),l.uniformMatrix4fv(V,!1,this._camera.data.viewMatrix.buffer),c=l.getUniformLocation(this.program,"outlineThickness"),l.uniform1f(c,this.outlineThickness),C=l.getUniformLocation(this.program,"outlineColor"),l.uniform4fv(C,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=l.createTexture(),t=l.getUniformLocation(this.program,"u_texture"),l.uniform1i(t,0),N=l.createTexture(),A=l.getUniformLocation(this.program,"u_transforms"),l.uniform1i(A,1),z=l.createTexture(),e=l.getUniformLocation(this.program,"u_transformIndices"),l.uniform1i(e,2),j=l.createTexture(),I=l.getUniformLocation(this.program,"u_colorTransforms"),l.uniform1i(I,3),O=l.createTexture(),o=l.getUniformLocation(this.program,"u_colorTransformIndices"),l.uniform1i(o,4),K=l.createBuffer(),l.bindBuffer(l.ARRAY_BUFFER,K),l.bufferData(l.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),l.STATIC_DRAW),E=l.getAttribLocation(this.program,"position"),l.enableVertexAttribArray(E),l.vertexAttribPointer(E,2,l.FLOAT,!1,0,0),w=l.createBuffer(),S=l.getAttribLocation(this.program,"index"),l.enableVertexAttribArray(S),l.bindBuffer(l.ARRAY_BUFFER,w),$()}else console.error("Cannot render without scene and camera")};const q=G=>{const y=G;y.object instanceof BU&&y.object.addEventListener("objectChanged",UU),this.dispose()},u=G=>{const y=G;y.object instanceof BU&&y.object.removeEventListener("objectChanged",UU),this.dispose()},UU=G=>{const y=G;y.object instanceof BU&&this._renderData&&this._renderData.markDirty(y.object)};this._render=()=>{var G,y;if(this._scene&&this._camera&&this.renderData){if(this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged||this.renderData.colorTransformsChanged){this.renderData.dataChanged&&(l.activeTexture(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,this.splatTexture),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32UI,this.renderData.width,this.renderData.height,0,l.RGBA_INTEGER,l.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(l.activeTexture(l.TEXTURE1),l.bindTexture(l.TEXTURE_2D,N),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,l.RGBA,l.FLOAT,this.renderData.transforms),l.activeTexture(l.TEXTURE2),l.bindTexture(l.TEXTURE_2D,z),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.transformIndices)),this.renderData.colorTransformsChanged&&(l.activeTexture(l.TEXTURE3),l.bindTexture(l.TEXTURE_2D,j),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.RGBA32F,this.renderData.colorTransformsWidth,this.renderData.colorTransformsHeight,0,l.RGBA,l.FLOAT,this.renderData.colorTransforms),l.activeTexture(l.TEXTURE4),l.bindTexture(l.TEXTURE_2D,O),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,l.NEAREST),l.texImage2D(l.TEXTURE_2D,0,l.R32UI,this.renderData.colorTransformIndicesWidth,this.renderData.colorTransformIndicesHeight,0,l.RED_INTEGER,l.UNSIGNED_INT,this.renderData.colorTransformIndices));const nU=new Float32Array(this.renderData.positions.slice().buffer),M=new Float32Array(this.renderData.transforms.slice().buffer),i=new Uint32Array(this.renderData.transformIndices.slice().buffer);(G=this._worker)===null||G===void 0||G.postMessage({sortData:{positions:nU,transforms:M,transformIndices:i,vertexCount:this.renderData.vertexCount}},[nU.buffer,M.buffer,i.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1,this.renderData.colorTransformsChanged=!1}this._camera.update(),(y=this._worker)===null||y===void 0||y.postMessage({viewProj:this._camera.data.viewProj.buffer}),l.viewport(0,0,F.width,F.height),l.clearColor(0,0,0,0),l.clear(l.COLOR_BUFFER_BIT),l.disable(l.DEPTH_TEST),l.enable(l.BLEND),l.blendFuncSeparate(l.ONE_MINUS_DST_ALPHA,l.ONE,l.ONE_MINUS_DST_ALPHA,l.ONE),l.blendEquationSeparate(l.FUNC_ADD,l.FUNC_ADD),l.uniformMatrix4fv(Z,!1,this._camera.data.projectionMatrix.buffer),l.uniformMatrix4fv(V,!1,this._camera.data.viewMatrix.buffer),l.bindBuffer(l.ARRAY_BUFFER,K),l.vertexAttribPointer(E,2,l.FLOAT,!1,0,0),l.bindBuffer(l.ARRAY_BUFFER,w),l.bufferData(l.ARRAY_BUFFER,this.depthIndex,l.STATIC_DRAW),l.vertexAttribIPointer(S,1,l.INT,0,0),l.vertexAttribDivisor(S,1),l.drawArraysInstanced(l.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{var G;if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",q),this._scene.removeEventListener("objectRemoved",u);for(const y of this._scene.objects)y instanceof BU&&y.removeEventListener("objectChanged",UU);(G=this._worker)===null||G===void 0||G.terminate(),this.renderData.dispose(),l.deleteTexture(this.splatTexture),l.deleteTexture(N),l.deleteTexture(z),l.deleteBuffer(w),l.deleteBuffer(K)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=G=>{this._outlineThickness=G,this._initialized&&l.uniform1f(c,G)},this._setOutlineColor=G=>{this._outlineColor=G,this._initialized&&l.uniform4fv(C,new Float32Array(G.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(U){this._setOutlineThickness(U)}get outlineColor(){return this._outlineColor}set outlineColor(U){this._setOutlineColor(U)}get worker(){return this._worker}_getVertexSource(){return`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform highp sampler2D u_transforms;
uniform highp usampler2D u_transformIndices;
uniform highp sampler2D u_colorTransforms;
uniform highp usampler2D u_colorTransformIndices;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool useDepthFade;
uniform float depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;
out float vSize;
out float vSelected;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    float selected = float((cen.w >> 24) & 0xffu);

    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 transform = mat4(
        texelFetch(u_transforms, ivec2(0, transformIndex), 0),
        texelFetch(u_transforms, ivec2(1, transformIndex), 0),
        texelFetch(u_transforms, ivec2(2, transformIndex), 0),
        texelFetch(u_transforms, ivec2(3, transformIndex), 0)
    );

    if (selected < 0.5) {
        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;
    }

    mat4 viewTransform = view * transform;

    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }

    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(viewTransform)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111
    cov2d[0][0] += 0.3;
    cov2d[1][1] += 0.3;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if (lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 colorTransform = mat4(
        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),
        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)
    );

    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vColor = colorTransform * color;

    vPosition = position;
    vSize = length(majorAxis);
    vSelected = selected;

    float scalingFactor = 1.0;

    if (useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);
}
`}_getFragmentSource(){return`#version 300 es
precision highp float;

uniform float outlineThickness;
uniform vec4 outlineColor;

in vec4 vColor;
in vec2 vPosition;
in float vSize;
in float vSelected;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);

    if (A < -4.0) discard;

    if (vSelected < 0.5) {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
        return;
    }

    float outlineThreshold = -4.0 + (outlineThickness / vSize);

    if (A < outlineThreshold) {
        fragColor = outlineColor;
    } 
    else {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
    }
}
`}}class FF{constructor(U=1){let Q,F,l,Z,d=0,n=!1;this.initialize=V=>{if(!(V instanceof XU))throw new Error("FadeInPass requires a RenderProgram");d=V.started?1:0,n=!0,Q=V,F=V.renderer.gl,l=F.getUniformLocation(Q.program,"useDepthFade"),F.uniform1i(l,1),Z=F.getUniformLocation(Q.program,"depthFade"),F.uniform1f(Z,d)},this.render=()=>{var V;n&&!(!((V=Q.renderData)===null||V===void 0)&&V.updating)&&(F.useProgram(Q.program),d=Math.min(d+.01*U,1),d>=1&&(n=!1,F.uniform1i(l,0)),F.uniform1f(Z,d))}}dispose(){}}class tF{constructor(U=null,Q=null){this._backgroundColor=new GU;const F=U||document.createElement("canvas");U||(F.style.display="block",F.style.boxSizing="border-box",F.style.width="100%",F.style.height="100%",F.style.margin="0",F.style.padding="0",document.body.appendChild(F)),F.style.background=this._backgroundColor.toHexString(),this._canvas=F,this._gl=F.getContext("webgl2",{antialias:!1});const l=Q||[];Q||l.push(new FF),this._renderProgram=new XU(this,l);const Z=[this._renderProgram];this.resize=()=>{const d=F.clientWidth,n=F.clientHeight;F.width===d&&F.height===n||this.setSize(d,n)},this.setSize=(d,n)=>{F.width=d,F.height=n,this._gl.viewport(0,0,F.width,F.height);for(const V of Z)V.resize()},this.render=(d,n)=>{for(const V of Z)V.render(d,n)},this.dispose=()=>{for(const d of Z)d.dispose()},this.addProgram=d=>{Z.push(d)},this.removeProgram=d=>{const n=Z.indexOf(d);if(n<0)throw new Error("Program not found");Z.splice(n,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(U){this._backgroundColor=U,this._canvas.style.background=U.toHexString()}}class nF{constructor(U,Q,F=.5,l=.5,Z=5,d=!0,n=new m){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let V=n.clone(),t=V.clone(),A=F,e=l,I=Z,o=!1,c=!1,C=0,E=0,S=0;const N={};let z=!1;U.addEventListener("objectChanged",()=>{if(z)return;const i=U.rotation.toEuler();A=-i.y,e=-i.x;const p=U.position.x-I*Math.sin(A)*Math.cos(e),T=U.position.y+I*Math.sin(e),Y=U.position.z+I*Math.cos(A)*Math.cos(e);t=new m(p,T,Y)}),this.setCameraTarget=i=>{const p=i.x-U.position.x,T=i.y-U.position.y,Y=i.z-U.position.z;I=Math.sqrt(p*p+T*T+Y*Y),e=Math.atan2(T,Math.sqrt(p*p+Y*Y)),A=-Math.atan2(p,Y),t=new m(i.x,i.y,i.z)};const j=()=>.1+.9*(I-this.minZoom)/(this.maxZoom-this.minZoom),O=i=>{N[i.code]=!0,i.code==="ArrowUp"&&(N.KeyW=!0),i.code==="ArrowDown"&&(N.KeyS=!0),i.code==="ArrowLeft"&&(N.KeyA=!0),i.code==="ArrowRight"&&(N.KeyD=!0)},K=i=>{N[i.code]=!1,i.code==="ArrowUp"&&(N.KeyW=!1),i.code==="ArrowDown"&&(N.KeyS=!1),i.code==="ArrowLeft"&&(N.KeyA=!1),i.code==="ArrowRight"&&(N.KeyD=!1)},w=i=>{M(i),o=!0,c=i.button===2,E=i.clientX,S=i.clientY,window.addEventListener("mouseup",$)},$=i=>{M(i),o=!1,c=!1,window.removeEventListener("mouseup",$)},q=i=>{if(M(i),!o||!U)return;const p=i.clientX-E,T=i.clientY-S;if(c){const Y=j(),VU=-p*this.panSpeed*.01*Y,AU=-T*this.panSpeed*.01*Y,H=dU.RotationFromQuaternion(U.rotation).buffer,L=new m(H[0],H[3],H[6]),FU=new m(H[1],H[4],H[7]);t=t.add(L.multiply(VU)),t=t.add(FU.multiply(AU))}else A-=p*this.orbitSpeed*.003,e+=T*this.orbitSpeed*.003,e=Math.min(Math.max(e,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);E=i.clientX,S=i.clientY},u=i=>{M(i);const p=j();I+=i.deltaY*this.zoomSpeed*.025*p,I=Math.min(Math.max(I,this.minZoom),this.maxZoom)},UU=i=>{if(M(i),i.touches.length===1)o=!0,c=!1,E=i.touches[0].clientX,S=i.touches[0].clientY,C=0;else if(i.touches.length===2){o=!0,c=!0,E=(i.touches[0].clientX+i.touches[1].clientX)/2,S=(i.touches[0].clientY+i.touches[1].clientY)/2;const p=i.touches[0].clientX-i.touches[1].clientX,T=i.touches[0].clientY-i.touches[1].clientY;C=Math.sqrt(p*p+T*T)}},G=i=>{M(i),o=!1,c=!1},y=i=>{if(M(i),o&&U)if(c){const p=j(),T=i.touches[0].clientX-i.touches[1].clientX,Y=i.touches[0].clientY-i.touches[1].clientY,VU=Math.sqrt(T*T+Y*Y);I+=(C-VU)*this.zoomSpeed*.1*p,I=Math.min(Math.max(I,this.minZoom),this.maxZoom),C=VU;const AU=(i.touches[0].clientX+i.touches[1].clientX)/2,H=(i.touches[0].clientY+i.touches[1].clientY)/2,L=AU-E,FU=H-S,x=dU.RotationFromQuaternion(U.rotation).buffer,aU=new m(x[0],x[3],x[6]),sU=new m(x[1],x[4],x[7]);t=t.add(aU.multiply(-L*this.panSpeed*.025*p)),t=t.add(sU.multiply(-FU*this.panSpeed*.025*p)),E=AU,S=H}else{const p=i.touches[0].clientX-E,T=i.touches[0].clientY-S;A-=p*this.orbitSpeed*.003,e+=T*this.orbitSpeed*.003,e=Math.min(Math.max(e,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),E=i.touches[0].clientX,S=i.touches[0].clientY}},nU=(i,p,T)=>(1-T)*i+T*p;this.update=()=>{z=!0,F=nU(F,A,this.dampening),l=nU(l,e,this.dampening),Z=nU(Z,I,this.dampening),V=V.lerp(t,this.dampening);const i=V.x+Z*Math.sin(F)*Math.cos(l),p=V.y-Z*Math.sin(l),T=V.z-Z*Math.cos(F)*Math.cos(l);U.position=new m(i,p,T);const Y=V.subtract(U.position).normalize(),VU=Math.asin(-Y.y),AU=Math.atan2(Y.x,Y.z);U.rotation=v.FromEuler(new m(VU,AU,0));const H=.025,L=.01,FU=dU.RotationFromQuaternion(U.rotation).buffer,x=new m(-FU[2],-FU[5],-FU[8]),aU=new m(FU[0],FU[3],FU[6]);N.KeyS&&(t=t.add(x.multiply(H))),N.KeyW&&(t=t.subtract(x.multiply(H))),N.KeyA&&(t=t.subtract(aU.multiply(H))),N.KeyD&&(t=t.add(aU.multiply(H))),N.KeyE&&(A+=L),N.KeyQ&&(A-=L),N.KeyR&&(e+=L),N.KeyF&&(e-=L),z=!1};const M=i=>{i.preventDefault(),i.stopPropagation()};this.dispose=()=>{Q.removeEventListener("dragenter",M),Q.removeEventListener("dragover",M),Q.removeEventListener("dragleave",M),Q.removeEventListener("contextmenu",M),Q.removeEventListener("mousedown",w),Q.removeEventListener("mousemove",q),Q.removeEventListener("wheel",u),Q.removeEventListener("touchstart",UU),Q.removeEventListener("touchend",G),Q.removeEventListener("touchmove",y),d&&(window.removeEventListener("keydown",O),window.removeEventListener("keyup",K))},d&&(window.addEventListener("keydown",O),window.addEventListener("keyup",K)),Q.addEventListener("dragenter",M),Q.addEventListener("dragover",M),Q.addEventListener("dragleave",M),Q.addEventListener("contextmenu",M),Q.addEventListener("mousedown",w),Q.addEventListener("mousemove",q),Q.addEventListener("wheel",u),Q.addEventListener("touchstart",UU),Q.addEventListener("touchend",G),Q.addEventListener("touchmove",y),this.update()}}export{GU as E,QF as W,tF as Y,dF as m,lF as o,m as t,nF as u};
